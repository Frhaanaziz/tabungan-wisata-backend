generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String?
  role          String         @default("student")
  image         String?
  emailVerified Boolean        @default(false)
  schoolId      String?
  balance       Int            @default(0)
  payments      Payment[]
  Withdrawal    Withdrawal[]
  verification  Verification[]
  accounts      Account[]
  school        School?        @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([schoolId], name: "schoolId")
}

model School {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  address           String
  contact           String
  users             User[]
  withdrawals       Withdrawal[]
  eventRegistration EventRegistration[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Event {
  id                String              @id @default(cuid())
  name              String
  highlight         String              @db.Text
  include           String              @db.Text
  exclude           String              @db.Text
  startDate         DateTime
  endDate           DateTime
  cost              Int
  images            File[]
  itineraries       Itinerary[]
  eventRegistration EventRegistration[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Itinerary {
  id          String @id @default(cuid())
  name        String
  description String @db.Text
  eventId     String
  event       Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId], name: "eventId")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Int
  userId        String
  paymentMethod String?
  status        PaymentStatus @default(pending)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade) // WARNING: CASCADE DELETE
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId], name: "userId")
}

model Withdrawal {
  id        String   @id @default(cuid())
  amount    Int
  userId    String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade) // WARNING: CASCADE DELETE
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // WARNING: CASCADE DELETE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "userId")
  @@index([schoolId], name: "schoolId")
}

model EventRegistration {
  id        String   @id @default(cuid())
  cost      Int
  eventId   String
  schoolId  String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([eventId], name: "eventId")
  @@index([schoolId], name: "schoolId")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model File {
  id           String   @id @default(cuid())
  url          String   @unique
  thumbnailUrl String?
  size         Int
  uploadedAt   DateTime
  event        Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String?

  @@index([eventId], name: "eventId")
}

model Verification {
  id        String   @id @default(cuid())
  type      String
  token     String   @unique(length: 250) @db.Text
  expiresAt DateTime
  active    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "userId")
}

enum UserRole {
  student
  teacher
  admin
}

enum PaymentStatus {
  pending
  completed
  failed
}
